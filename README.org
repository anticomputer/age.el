* age.el: transparent age encryption/decryption

#+html:<p align="center"><img src="img/emacs-age.png"/></p>

age.el is intended to provide transparent age[1] based file encryption
and decryption in Emacs. As such age.el does not support all
age CLI based use cases. Rather age.el assumes you have configured
a default identity and a default recipient, e.g. based off your
ssh private key and ssh public key in ~.ssh/id_rsa[.pub]~, which
is the default setting.

The main use case is for folks who like to e.g. encrypt their Org
notes and things of that nature. Since age.el provides a direct
port of EPG/EPA functionality it can support all roles that .gpg
files can support in Emacs, e.g. ~.authinfo.age~ should work fine as well.

[1]: https://github.com/FiloSottile/age

* Usage

Put age.el somewhere in your load-path and:

#+begin_src emacs-lisp
(require 'age)
(age-file-enable)
#+end_src

If you prefer to use ~use-package~, my quelpa configuration looks like:

#+begin_src emacs-lisp
(use-package age
  :quelpa (age :fetcher github :repo "anticomputer/age.el")
  :ensure t
  :demand
  :config
  (age-file-enable))
#+end_src

You can now open, edit, and save age encryted files from Emacs as
long as they contain the .age extension.

age.el also supports creating new .age files through find-file and
they will be encrypted to your default recipient on first save.

Example:

#+begin_src
M-x find-file RET /tmp/test.age RET
M-x save-buffer RET
#+end_src

Will create an age encrypted file named test.age in the ~/tmp~
directory. It will be encrypted to a recipient of ~.ssh/id_rsa.pub~
by default and decrypted with an identity of ~.ssh/id_rsa~ by default.

You can customize the default key values via ~age-default-recipient~ and
~age-default-identity~, respectively.

age.el tries to remain composable with the core philosophy of age itself
and as such does not try to provide a kitchen sink worth of features.

For example, you can use something like [[https://github.com/str4d/age-plugin-yubikey][age-plugin-yubikey]] to keep your
age key material on a yubikey. See [[https://words.filippo.io/dispatches/passage/][this blog post]] by the age author on
an example configuration. You could then use these yubikey based age
identities and recipients as your default recipients and identities for
age.el and as a result have e.g. a touch requirement for every decryption
operation in emacs.

* Known issues

The age CLI does not support pinentry by design. Users are encouraged
to use identity (private) keys and recipient (public) keys, and manage
those secrets outside of Emacs accordingly. As such age.el does not
currently support passphrase based age Encryption/Decryption as we
do not have a tty available to provide a passphrase to age (I think).

You can work around this by using [[https://github.com/str4d/rage][rage]] instead of age, which is a Rust
based implementation of the [[https://github.com/C2SP/C2SP/blob/main/age.md][Age spec]] and which does support pinentry by
default and age.el will work with rage as well. An example rage config may
look like:

#+begin_src emacs-lisp
(use-package age
  :quelpa (age :fetcher github :repo "anticomputer/age.el" :branch "scratch")
  :ensure t
  :demand
  :custom
  ;; use rage for pinentry, note this _has_ to go through customize
  (age-program "rage")
  (age-default-identity "~/.ssh/id_rsa")
  (age-default-recipient "~/.ssh/id_rsa.pub")
  :config
  (age-file-enable))
#+end_src

You will now be able to use passphrase protected ssh keys as well:

#+html:<p align="center"><img src="img/emacs-rage.png"/></p>

* Disclaimer

This is experimental software and subject to heavy feature iterations.

* Copyright

This code was ported from the existing EPA and EPG Emacs code and as such
their original copyright applies:

Copyright (C) 1999-2000, 2002-2022 Free Software Foundation, Inc.

Author: Daiki Ueno <ueno@unixuser.org>
Keywords: emacs
Version: 1.0.0

This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
